package application

import (
	"html/template"
	"net/http"
	"strconv"
	"time"

	"github.com/google/uuid"
	core "github.com/mt1976/mwt-go-dev/core"
	"github.com/mt1976/mwt-go-dev/dao"
	dm "github.com/mt1976/mwt-go-dev/datamodel"
	"github.com/mt1976/mwt-go-dev/logs"
)

// Defines the Fields to Fetch from SQL
//CredentialsStoreSQL = "id, username, password, firstname, lastname, knownas, email, issued, expiry, role, brand, _created, _who, _host, _updated"

//var sqlCredentialsStoreId, sqlCredentialsStoreUsername, sqlCredentialsStorePassword, sqlCredentialsStoreFirstname, sqlCredentialsStoreLastname, sqlCredentialsStoreKnownas, sqlCredentialsStoreEmail, sqlCredentialsStoreIssued, sqlCredentialsStoreExpiry, sqlCredentialsStoreRole, sqlCredentialsStoreBrand, sqlCredentialsStoreSYSCreated, sqlCredentialsStoreSYSWho, sqlCredentialsStoreSYSHost, sqlCredentialsStoreSYSUpdated sql.NullString
var dsCredentials dm.DataStoreMessages

func init() {
	FullTableName := core.ApplicationPropertiesDB["schema"] + "." + "credentialsStore"
	dsCredentials = dm.DataStoreMessages{
		Table: FullTableName,
		//		Columns:   "id, username, password, firstname, lastname, knownas, email, issued, expiry, role, brand, _created, _who, _host, _updated",
		Insert:    "INSERT INTO " + FullTableName + "(%s) VALUES('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s','%s');",
		Delete:    "DELETE FROM " + FullTableName + " WHERE id='%s';",
		Select:    "SELECT %s FROM " + FullTableName + ";",
		Get:       "SELECT %s FROM " + FullTableName + " WHERE id='%s';",
		GetAlt:    "SELECT %s FROM " + FullTableName + " WHERE username='%s';",
		DeleteAlt: "",
	}
}

//appCredentialsStorePage is cheese
type appCredentialsStoreListPage struct {
	UserMenu              []dm.AppMenuItem
	UserRole              string
	UserNavi              string
	Title                 string
	PageTitle             string
	CredentialsStoreCount int
	CredentialsStoreList  []dm.Credentials
}

//appCredentialsStorePage is cheese
type appCredentialsStorePage struct {
	UserMenu   []dm.AppMenuItem
	UserRole   string
	UserNavi   string
	Title      string
	PageTitle  string
	ID         string
	Action     string
	Id         string
	Username   string
	Password   string
	Firstname  string
	Lastname   string
	Knownas    string
	Email      string
	Issued     string
	Expiry     string
	Role       string
	Brand      string
	SYSCreated string
	SYSWho     string
	SYSHost    string
	SYSUpdated string
}

const (
	Credentials_Redirect = "/listCredentialsStore/"
)

func Credentials_Publish(mux http.ServeMux) {
	mux.HandleFunc(Credentials_Redirect, Credentials_HandlerList)
	mux.HandleFunc("/viewCredentialsStore/", Credentials_HandlerView)
	mux.HandleFunc("/editCredentialsStore/", Credentials_HandlerEdit)
	mux.HandleFunc("/deleteCredentialsStore/", Credentials_HandlerDelete)
	mux.HandleFunc("/saveCredentialsStore/", Credentials_HandlerSave)
	mux.HandleFunc("/newCredentialsStore/", Credentials_HandlerNew)
	mux.HandleFunc("/banCredentialsStore/", Credentials_HandlerBan)
	mux.HandleFunc("/activateCredentialsStore/", Credentials_HandlerActivate)
	logs.Publish("Application", "Credentials")
}

func Credentials_HandlerList(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(core.SessionValidate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below

	tmpl := "CredentialsStoreList"
	if core.IsChildInstance {
		// This is a child instance running, deliver the cut down Page
		tmpl = tmpl + "_Child"
	}

	inUTL := r.URL.Path
	w.Header().Set("Content-Type", "text/html")
	core.ServiceMessage(inUTL)

	var returnList []dm.Credentials

	noItems, returnList, _ := dao.Credentials_GetList()

	pageCredentialsStoreList := appCredentialsStoreListPage{
		UserMenu:              UserMenu_Get(r),
		UserRole:              core.GetUserRole(r),
		UserNavi:              "NOT USED",
		Title:                 core.ApplicationProperties["appname"],
		PageTitle:             PageTitle(dm.Credentials_Title, core.Action_List),
		CredentialsStoreCount: noItems,
		CredentialsStoreList:  returnList,
	}

	t, _ := template.ParseFiles(core.GetTemplateID(tmpl, core.GetUserRole(r)))
	t.Execute(w, pageCredentialsStoreList)

}

func Credentials_HandlerView(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(core.SessionValidate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below
	//bloop
	tmpl := "CredentialsStoreView"

	inUTL := r.URL.Path
	w.Header().Set("Content-Type", "text/html")
	core.ServiceMessage(inUTL)

	searchID := core.GetURLparam(r, dm.Credentials_QueryString)
	_, returnRecord, _ := dao.Credentials_GetByID(searchID)

	pageCredentialStoreList := appCredentialsStorePage{
		Title:     core.ApplicationProperties["appname"],
		PageTitle: PageTitle(dm.Credentials_Title, core.Action_View),
		Action:    "",
		UserMenu:  UserMenu_Get(r),
		UserRole:  core.GetUserRole(r),
		UserNavi:  "NOT USED",
		// Above are mandatory
		// Below are variable
		Id:         returnRecord.Id,
		Username:   returnRecord.Username,
		Password:   returnRecord.Password,
		Firstname:  returnRecord.Firstname,
		Lastname:   returnRecord.Lastname,
		Knownas:    returnRecord.Knownas,
		Email:      returnRecord.Email,
		Issued:     returnRecord.Issued,
		Expiry:     returnRecord.Expiry,
		Role:       returnRecord.Role,
		Brand:      returnRecord.Brand,
		SYSCreated: returnRecord.SYSCreated,
		SYSWho:     returnRecord.SYSWho,
		SYSHost:    returnRecord.SYSHost,
		SYSUpdated: returnRecord.SYSUpdated,
	}

	//fmt.Println(pageCredentialStoreList)

	t, _ := template.ParseFiles(core.GetTemplateID(tmpl, core.GetUserRole(r)))
	t.Execute(w, pageCredentialStoreList)

}

func Credentials_HandlerEdit(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(core.SessionValidate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below

	tmpl := "CredentialsStoreEdit"

	inUTL := r.URL.Path
	w.Header().Set("Content-Type", "text/html")
	core.ServiceMessage(inUTL)

	searchID := core.GetURLparam(r, dm.Credentials_QueryString)
	_, returnRecord, _ := dao.Credentials_GetByID(searchID)
	//fmt.Println("NoSienaItems", noItems, searchID)
	//fmt.Println(returnList)
	//fmt.Println(tmpl)

	//fmt.Println(displayList)

	pageCredentialStoreList := appCredentialsStorePage{
		Title:     core.ApplicationProperties["appname"],
		PageTitle: PageTitle(dm.Credentials_Title, core.Action_Edit),
		UserMenu:  UserMenu_Get(r),
		UserRole:  core.GetUserRole(r),
		UserNavi:  "NOT USED",
		Action:    "",
		// Above are mandatory
		// Below are variable
		Id:         returnRecord.Id,
		Username:   returnRecord.Username,
		Password:   returnRecord.Password,
		Firstname:  returnRecord.Firstname,
		Lastname:   returnRecord.Lastname,
		Knownas:    returnRecord.Knownas,
		Email:      returnRecord.Email,
		Issued:     returnRecord.Issued,
		Expiry:     returnRecord.Expiry,
		Role:       returnRecord.Role,
		Brand:      returnRecord.Brand,
		SYSCreated: returnRecord.SYSCreated,
		SYSWho:     returnRecord.SYSWho,
		SYSHost:    returnRecord.SYSHost,
		SYSUpdated: returnRecord.SYSUpdated,
	}
	//fmt.Println(pageCredentialStoreList)

	t, _ := template.ParseFiles(core.GetTemplateID(tmpl, core.GetUserRole(r)))
	t.Execute(w, pageCredentialStoreList)

}

func Credentials_HandlerSave(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(core.SessionValidate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below
	inUTL := r.URL.Path
	core.ServiceMessageAction(inUTL, "Save", r.FormValue("Id"))

	var s dm.Credentials

	s.Id = r.FormValue("Id")
	s.Username = r.FormValue("Username")
	s.Password = r.FormValue("Password")
	s.Firstname = r.FormValue("Firstname")
	s.Lastname = r.FormValue("Lastname")
	s.Knownas = r.FormValue("Knownas")
	s.Email = r.FormValue("Email")
	s.Issued = r.FormValue("Issued")
	s.Expiry = r.FormValue("Expiry")
	s.Role = r.FormValue("Role")
	s.Brand = r.FormValue("Brand")

	dao.Credentials_Store(s, r)

	http.Redirect(w, r, Credentials_Redirect, http.StatusFound)

}

func Credentials_HandlerDelete(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(core.SessionValidate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below

	inUTL := r.URL.Path
	searchID := core.GetURLparam(r, dm.Credentials_QueryString)
	core.ServiceMessageAction(inUTL, "Delete", searchID)
	dao.DeleteCredentialsStore(searchID)
	http.Redirect(w, r, Credentials_Redirect, http.StatusFound)

}

func Credentials_HandlerBan(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(core.SessionValidate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below

	inUTL := r.URL.Path
	searchID := core.GetURLparam(r, dm.Credentials_QueryString)
	if len(searchID) == 0 {
		searchID = r.FormValue("Id")
	}
	core.ServiceMessageAction(inUTL, "Ban", searchID)
	banCredentialsStore(searchID, r)
	http.Redirect(w, r, Credentials_Redirect, http.StatusFound)
}

func Credentials_HandlerActivate(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(core.SessionValidate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below

	inUTL := r.URL.Path
	searchID := core.GetURLparam(r, dm.Credentials_QueryString)
	if len(searchID) == 0 {
		searchID = r.FormValue("Id")
	}
	core.ServiceMessageAction(inUTL, "Activate", searchID)
	activateCredentialsStore(searchID, r)
	http.Redirect(w, r, Credentials_Redirect, http.StatusFound)

}

func Credentials_HandlerNew(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(core.SessionValidate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below

	tmpl := "CredentialsStoreNew"

	inUTL := r.URL.Path
	w.Header().Set("Content-Type", "text/html")
	core.ServiceMessage(inUTL)

	pageCredentialStoreList := appCredentialsStorePage{
		Title:     core.ApplicationProperties["appname"],
		PageTitle: PageTitle(dm.Credentials_Title, core.Action_New),
		UserMenu:  UserMenu_Get(r),
		UserRole:  core.GetUserRole(r),
		UserNavi:  "NOT USED",
		Action:    "",
		// Above are mandatory
		// Below are variable

	}

	t, _ := template.ParseFiles(core.GetTemplateID(tmpl, core.GetUserRole(r)))
	t.Execute(w, pageCredentialStoreList)
}

func getExpiryDate() string {
	expiryDate := time.Now()
	life, _ := strconv.Atoi(core.ApplicationProperties["credentialslife"])
	expiryDate = expiryDate.AddDate(0, 0, life)
	return expiryDate.Format(core.DATETIMEFORMATUSER)
}

func banCredentialsStore(id string, req *http.Request) {

	_, r, _ := dao.Credentials_GetByID(id)
	r.Expiry = ""
	r.Password = ""
	dao.Credentials_Store(r, req)
}

func activateCredentialsStore(id string, req *http.Request) {

	_, r, _ := dao.Credentials_GetByID(id)
	r.Expiry = getExpiryDate()
	dao.Credentials_Store(r, req)
}

func newCredentialsStoreID() string {
	id := uuid.New().String()
	return id
}
